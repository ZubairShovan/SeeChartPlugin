/**
 * Created by enamul on 5/25/2017.
 */
console.log('server running...');


var fs = require('fs');
var http = require('http');
var https = require('https');
var privateKey  = fs.readFileSync('encryption/key.pem');
console.log(privateKey)
var certificate = fs.readFileSync('encryption/cert.pem');
console.log(certificate)

var credentials = {key: privateKey, cert: certificate};

var express = require('express');
var app = express();
var bodyParser = require('body-parser');

// your express configuration here

var httpServer = http.createServer(app);
var httpsServer = https.createServer(credentials, app);

httpServer.listen(8081);
httpsServer.listen(3000);


/*var MongoClient = require('mongodb').MongoClient
    , assert = require('assert');*/

var Utils = require('./utils.js');

// Connection URL
//var url = 'mongodb://localhost:27017/myproject';

var fs = require('fs');
if (!fs.existsSync('../data/')){
    fs.mkdirSync('../data');
}
if (!fs.existsSync('../data/Screenshots/')){
  fs.mkdirSync('../data/Screenshots/');
}
if (!fs.existsSync('../data/D3JSONData/')){
    fs.mkdirSync('../data/D3JSONData/');
}
if (!fs.existsSync('../data/deconstructedPageList.csv')){
    const fd = fs.openSync('../data/deconstructedPageList.csv', 'w')
}
if (!fs.existsSync('../data/iframe_url.csv')){
    const fd = fs.openSync('../data/iframe_url.csv', 'w')
}




var counter = 0;
var fileBuffer =  fs.readFileSync('../data/deconstructedPageList'+".csv");
var to_string = fileBuffer.toString();
var split_lines = to_string.split("\n");

counter = split_lines.length-1;
console.log(counter);




//}
/** bodyParser.urlencoded(options)
 * Parses the text as URL encoded data (which is how browsers tend to send form data from regular forms set to POST)
 * and exposes the resulting object (containing the keys and values) on req.body
 */
app.use(bodyParser.json({limit: '100mb'}));
app.use(bodyParser.urlencoded({limit: '100mb', extended: true}));



/**bodyParser.json(options)
 * Parses the text as JSON and exposes the resulting object on req.body.
 */
app.use(bodyParser.json());
// Add headers
app.use(function (req, res, next) {

  // Website you wish to allow to connect
  res.setHeader('Access-Control-Allow-Origin', '*');

  // Request methods you wish to allow
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');

  // Request headers you wish to allow
  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');

  // Set to true if you need the website to include cookies in the requests sent
  // to the API (e.g. in case you use sessions)
  res.setHeader('Access-Control-Allow-Credentials', true);

  // Pass to next layer of middleware
  next();
});

var d3DeconstructionData = "";


app.post("/", function (req, res) {
  d3DeconstructionData = JSON.stringify(req.body);
  console.log(req.body);
  d3DeconstructionData = d3DeconstructionData.replaceAll("$$","");
//  d3DeconstructionData = '{"name": "2.json","d3data": '+d3DeconstructionData+'}'
  var jsonObj = JSON.parse(d3DeconstructionData);


  var fileBuffer =  fs.readFileSync('../data/deconstructedPageList'+".csv");
  to_string = fileBuffer.toString();
  split_lines = to_string.split("\n");

  var scrapID = 0;
  var already_scrapped = false;
  for(let index = 0;index<split_lines.length;index++){
    if(split_lines[index].split(',')[1]=== jsonObj.url){
      already_scrapped = true;
      scrapID = parseInt(split_lines[index].split(',')[0]);
    }
  }

  if(already_scrapped === false){
    scrapID = counter;
  }

  var logData = scrapID+','+jsonObj.url+','+jsonObj.scrap_date+','+jsonObj.d3data.length+'\n';

  fs.appendFile('../data/deconstructedPageList'+".csv",logData, function(err) {
    if(err) {
      return console.log(err);
    }
    console.log(logData);
  });


  fs.writeFile('../data/D3JSONData/'+scrapID+".json",d3DeconstructionData, function(err) {
    if(err) {
      return console.log(err);
    }
    console.log("The file was saved!"+ '../data/D3JSONData/'+scrapID+".json");
  });
  if(!already_scrapped)
    counter+= 1;
   if(d3DeconstructionData!=""){
  }
});


app.post("/getScreenshot", function (req, res) {
// string generated by canvas.toDataURL()

  var img = req.body.imgBase64;
  var url = req.body.url;
  var vis_id = req.body.vis_id;

  var image_name= makeRandomId()+'.png';

// strip off the data: url prefix to get just the base64-encoded bytes
  var data = img.replace(/^data:image\/\w+;base64,/, "");
  var buf = new Buffer(data, 'base64');

  fs.writeFile('../data/Screenshots/'+image_name, buf);

  fs.appendFile('../data/image_list.csv', image_name+','+vis_id+','+url+','+req.body.date+'\n', function (err) {
    if (err) throw err;
    console.log('screenshot Saved!');
  });


});



app.post("/addURL", function (req, res) {
  //console.log(req);

  var iframe_url = req.body.iframe_url;
  var original_url = req.body.original_url;
  console.log(iframe_url);
  console.log(original_url);

  fs.appendFile('../data/iframe_url.csv', iframe_url+','+original_url+'\n', function (err) {
    if (err) throw err;
    console.log('iframe url!');
  });


});


app.post("/search", function (req, res) {
  var query = req.body.jsonQuery;
  console.log('searching...'+query);

  search(query, function(err, results) {
    console.log('results', results);
    var searchResult  = JSON.stringify(results);
    //console.log(searchResult)
    res.setHeader('Content-Type', 'application/json');
    res.send(searchResult);
    //res.end(searchResult);
  });

});

function makeRandomId()
{
  var text = "";
  var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

  for( var i=0; i < 7; i++ )
    text += possible.charAt(Math.floor(Math.random() * possible.length));

  return text;
}

//app.listen(port);

String.prototype.replaceAll = function(search, replacement) {
  var target = this;
  return target.replace(new RegExp(search, 'g'), replacement);
};


  